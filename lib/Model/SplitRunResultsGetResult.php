<?php
/**
 * SplitRunResultsGetResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Overview  nextgen.kajomigenerator.de
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SplitRunResultsGetResult Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SplitRunResultsGetResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'splitRunResultsGetResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'float',
        'master_id' => 'float',
        'type' => 'string',
        'winner' => '\Swagger\Client\Model\SplitRunPostResultWinner',
        'mailings' => '\Swagger\Client\Model\SplitRunResultsGetResultMailings[]',
        'datesent' => '\DateTime',
        'mailings_per_date' => '\Swagger\Client\Model\SplitRunResultsGetResultMailingsPerDate[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'master_id' => null,
        'type' => null,
        'winner' => null,
        'mailings' => null,
        'datesent' => 'date-time',
        'mailings_per_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'master_id' => 'master_id',
        'type' => 'type',
        'winner' => 'winner',
        'mailings' => 'mailings',
        'datesent' => 'datesent',
        'mailings_per_date' => 'mailings_per_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'master_id' => 'setMasterId',
        'type' => 'setType',
        'winner' => 'setWinner',
        'mailings' => 'setMailings',
        'datesent' => 'setDatesent',
        'mailings_per_date' => 'setMailingsPerDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'master_id' => 'getMasterId',
        'type' => 'getType',
        'winner' => 'getWinner',
        'mailings' => 'getMailings',
        'datesent' => 'getDatesent',
        'mailings_per_date' => 'getMailingsPerDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['master_id'] = isset($data['master_id']) ? $data['master_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['winner'] = isset($data['winner']) ? $data['winner'] : null;
        $this->container['mailings'] = isset($data['mailings']) ? $data['mailings'] : null;
        $this->container['datesent'] = isset($data['datesent']) ? $data['datesent'] : null;
        $this->container['mailings_per_date'] = isset($data['mailings_per_date']) ? $data['mailings_per_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['master_id'] === null) {
            $invalidProperties[] = "'master_id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['winner'] === null) {
            $invalidProperties[] = "'winner' can't be null";
        }
        if ($this->container['mailings'] === null) {
            $invalidProperties[] = "'mailings' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id id of splitrun
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets master_id
     *
     * @return float
     */
    public function getMasterId()
    {
        return $this->container['master_id'];
    }

    /**
     * Sets master_id
     *
     * @param float $master_id id of splitrun master mailing
     *
     * @return $this
     */
    public function setMasterId($master_id)
    {
        $this->container['master_id'] = $master_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type of splitrun test
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets winner
     *
     * @return \Swagger\Client\Model\SplitRunPostResultWinner
     */
    public function getWinner()
    {
        return $this->container['winner'];
    }

    /**
     * Sets winner
     *
     * @param \Swagger\Client\Model\SplitRunPostResultWinner $winner winner
     *
     * @return $this
     */
    public function setWinner($winner)
    {
        $this->container['winner'] = $winner;

        return $this;
    }

    /**
     * Gets mailings
     *
     * @return \Swagger\Client\Model\SplitRunResultsGetResultMailings[]
     */
    public function getMailings()
    {
        return $this->container['mailings'];
    }

    /**
     * Sets mailings
     *
     * @param \Swagger\Client\Model\SplitRunResultsGetResultMailings[] $mailings mailing objects with result stats
     *
     * @return $this
     */
    public function setMailings($mailings)
    {
        $this->container['mailings'] = $mailings;

        return $this;
    }

    /**
     * Gets datesent
     *
     * @return \DateTime
     */
    public function getDatesent()
    {
        return $this->container['datesent'];
    }

    /**
     * Sets datesent
     *
     * @param \DateTime $datesent timestamp when splitrun was sent
     *
     * @return $this
     */
    public function setDatesent($datesent)
    {
        $this->container['datesent'] = $datesent;

        return $this;
    }

    /**
     * Gets mailings_per_date
     *
     * @return \Swagger\Client\Model\SplitRunResultsGetResultMailingsPerDate[]
     */
    public function getMailingsPerDate()
    {
        return $this->container['mailings_per_date'];
    }

    /**
     * Sets mailings_per_date
     *
     * @param \Swagger\Client\Model\SplitRunResultsGetResultMailingsPerDate[] $mailings_per_date array of date-mailing objects
     *
     * @return $this
     */
    public function setMailingsPerDate($mailings_per_date)
    {
        $this->container['mailings_per_date'] = $mailings_per_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


