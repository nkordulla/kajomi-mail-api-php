<?php
/**
 * ListSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Overview  nextgen.kajomigenerator.de
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ListSettings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'listSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sende' => 'string',
        'sendn' => 'string',
        'title' => 'string',
        'erraddr' => 'string',
        'listurl' => 'string',
        'mthost' => 'string',
        'selection_fields' => 'object',
        'listnum' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sende' => null,
        'sendn' => null,
        'title' => null,
        'erraddr' => null,
        'listurl' => null,
        'mthost' => null,
        'selection_fields' => null,
        'listnum' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sende' => 'sende',
        'sendn' => 'sendn',
        'title' => 'title',
        'erraddr' => 'erraddr',
        'listurl' => 'listurl',
        'mthost' => 'mthost',
        'selection_fields' => 'selection_fields',
        'listnum' => 'listnum'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sende' => 'setSende',
        'sendn' => 'setSendn',
        'title' => 'setTitle',
        'erraddr' => 'setErraddr',
        'listurl' => 'setListurl',
        'mthost' => 'setMthost',
        'selection_fields' => 'setSelectionFields',
        'listnum' => 'setListnum'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sende' => 'getSende',
        'sendn' => 'getSendn',
        'title' => 'getTitle',
        'erraddr' => 'getErraddr',
        'listurl' => 'getListurl',
        'mthost' => 'getMthost',
        'selection_fields' => 'getSelectionFields',
        'listnum' => 'getListnum'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sende'] = isset($data['sende']) ? $data['sende'] : null;
        $this->container['sendn'] = isset($data['sendn']) ? $data['sendn'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['erraddr'] = isset($data['erraddr']) ? $data['erraddr'] : null;
        $this->container['listurl'] = isset($data['listurl']) ? $data['listurl'] : null;
        $this->container['mthost'] = isset($data['mthost']) ? $data['mthost'] : null;
        $this->container['selection_fields'] = isset($data['selection_fields']) ? $data['selection_fields'] : null;
        $this->container['listnum'] = isset($data['listnum']) ? $data['listnum'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sende'] === null) {
            $invalidProperties[] = "'sende' can't be null";
        }
        if ($this->container['sendn'] === null) {
            $invalidProperties[] = "'sendn' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['erraddr'] === null) {
            $invalidProperties[] = "'erraddr' can't be null";
        }
        if ($this->container['listurl'] === null) {
            $invalidProperties[] = "'listurl' can't be null";
        }
        if ($this->container['mthost'] === null) {
            $invalidProperties[] = "'mthost' can't be null";
        }
        if ($this->container['listnum'] === null) {
            $invalidProperties[] = "'listnum' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sende
     *
     * @return string
     */
    public function getSende()
    {
        return $this->container['sende'];
    }

    /**
     * Sets sende
     *
     * @param string $sende from email address for this list
     *
     * @return $this
     */
    public function setSende($sende)
    {
        $this->container['sende'] = $sende;

        return $this;
    }

    /**
     * Gets sendn
     *
     * @return string
     */
    public function getSendn()
    {
        return $this->container['sendn'];
    }

    /**
     * Sets sendn
     *
     * @param string $sendn standard sendername for this list
     *
     * @return $this
     */
    public function setSendn($sendn)
    {
        $this->container['sendn'] = $sendn;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets erraddr
     *
     * @return string
     */
    public function getErraddr()
    {
        return $this->container['erraddr'];
    }

    /**
     * Sets erraddr
     *
     * @param string $erraddr returnpath for this list
     *
     * @return $this
     */
    public function setErraddr($erraddr)
    {
        $this->container['erraddr'] = $erraddr;

        return $this;
    }

    /**
     * Gets listurl
     *
     * @return string
     */
    public function getListurl()
    {
        return $this->container['listurl'];
    }

    /**
     * Sets listurl
     *
     * @param string $listurl listurl which is used e.g. for tracking when sending over this list
     *
     * @return $this
     */
    public function setListurl($listurl)
    {
        $this->container['listurl'] = $listurl;

        return $this;
    }

    /**
     * Gets mthost
     *
     * @return string
     */
    public function getMthost()
    {
        return $this->container['mthost'];
    }

    /**
     * Sets mthost
     *
     * @param string $mthost the mail relay host
     *
     * @return $this
     */
    public function setMthost($mthost)
    {
        $this->container['mthost'] = $mthost;

        return $this;
    }

    /**
     * Gets selection_fields
     *
     * @return object
     */
    public function getSelectionFields()
    {
        return $this->container['selection_fields'];
    }

    /**
     * Sets selection_fields
     *
     * @param object $selection_fields The selection fields which are possible to select via an user selection. If its a string it just means you can select it, if its an array, its just a mapping, it means the second element is the selection field.
     *
     * @return $this
     */
    public function setSelectionFields($selection_fields)
    {
        $this->container['selection_fields'] = $selection_fields;

        return $this;
    }

    /**
     * Gets listnum
     *
     * @return float
     */
    public function getListnum()
    {
        return $this->container['listnum'];
    }

    /**
     * Sets listnum
     *
     * @param float $listnum id of the list
     *
     * @return $this
     */
    public function setListnum($listnum)
    {
        $this->container['listnum'] = $listnum;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


