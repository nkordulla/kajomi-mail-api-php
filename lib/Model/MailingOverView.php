<?php
/**
 * MailingOverView
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Overview  nextgen.kajomigenerator.de
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MailingOverView Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MailingOverView implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'mailingOverView';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'has_tracking' => 'bool',
        'blacklists' => 'object[]',
        'whitelists' => 'object[]',
        'selections' => 'object[]',
        'followups' => 'object[]',
        'mailings' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'has_tracking' => null,
        'blacklists' => null,
        'whitelists' => null,
        'selections' => null,
        'followups' => null,
        'mailings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'has_tracking' => 'hasTracking',
        'blacklists' => 'blacklists',
        'whitelists' => 'whitelists',
        'selections' => 'selections',
        'followups' => 'followups',
        'mailings' => 'mailings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'has_tracking' => 'setHasTracking',
        'blacklists' => 'setBlacklists',
        'whitelists' => 'setWhitelists',
        'selections' => 'setSelections',
        'followups' => 'setFollowups',
        'mailings' => 'setMailings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'has_tracking' => 'getHasTracking',
        'blacklists' => 'getBlacklists',
        'whitelists' => 'getWhitelists',
        'selections' => 'getSelections',
        'followups' => 'getFollowups',
        'mailings' => 'getMailings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['has_tracking'] = isset($data['has_tracking']) ? $data['has_tracking'] : null;
        $this->container['blacklists'] = isset($data['blacklists']) ? $data['blacklists'] : null;
        $this->container['whitelists'] = isset($data['whitelists']) ? $data['whitelists'] : null;
        $this->container['selections'] = isset($data['selections']) ? $data['selections'] : null;
        $this->container['followups'] = isset($data['followups']) ? $data['followups'] : null;
        $this->container['mailings'] = isset($data['mailings']) ? $data['mailings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets has_tracking
     *
     * @return bool
     */
    public function getHasTracking()
    {
        return $this->container['has_tracking'];
    }

    /**
     * Sets has_tracking
     *
     * @param bool $has_tracking was there a viewtracking recognized
     *
     * @return $this
     */
    public function setHasTracking($has_tracking)
    {
        $this->container['has_tracking'] = $has_tracking;

        return $this;
    }

    /**
     * Gets blacklists
     *
     * @return object[]
     */
    public function getBlacklists()
    {
        return $this->container['blacklists'];
    }

    /**
     * Sets blacklists
     *
     * @param object[] $blacklists blacklists which are used
     *
     * @return $this
     */
    public function setBlacklists($blacklists)
    {
        $this->container['blacklists'] = $blacklists;

        return $this;
    }

    /**
     * Gets whitelists
     *
     * @return object[]
     */
    public function getWhitelists()
    {
        return $this->container['whitelists'];
    }

    /**
     * Sets whitelists
     *
     * @param object[] $whitelists whitelists which are used
     *
     * @return $this
     */
    public function setWhitelists($whitelists)
    {
        $this->container['whitelists'] = $whitelists;

        return $this;
    }

    /**
     * Gets selections
     *
     * @return object[]
     */
    public function getSelections()
    {
        return $this->container['selections'];
    }

    /**
     * Sets selections
     *
     * @param object[] $selections selections which are used
     *
     * @return $this
     */
    public function setSelections($selections)
    {
        $this->container['selections'] = $selections;

        return $this;
    }

    /**
     * Gets followups
     *
     * @return object[]
     */
    public function getFollowups()
    {
        return $this->container['followups'];
    }

    /**
     * Sets followups
     *
     * @param object[] $followups followups which are used
     *
     * @return $this
     */
    public function setFollowups($followups)
    {
        $this->container['followups'] = $followups;

        return $this;
    }

    /**
     * Gets mailings
     *
     * @return object[]
     */
    public function getMailings()
    {
        return $this->container['mailings'];
    }

    /**
     * Sets mailings
     *
     * @param object[] $mailings mailings which are excluded
     *
     * @return $this
     */
    public function setMailings($mailings)
    {
        $this->container['mailings'] = $mailings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


