<?php
/**
 * TransactionMailing
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Overview  nextgen.kajomigenerator.de
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TransactionMailing Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionMailing implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'transactionMailing';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'content' => 'string',
        'htcontent' => 'string',
        'ignore_links' => '\Swagger\Client\Model\IgnoreLinks',
        'senderemail' => 'string',
        'sendername' => 'string',
        'subject' => 'string',
        'linktracking' => 'bool',
        'class_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'content' => null,
        'htcontent' => null,
        'ignore_links' => null,
        'senderemail' => null,
        'sendername' => null,
        'subject' => null,
        'linktracking' => null,
        'class_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'content' => 'content',
        'htcontent' => 'htcontent',
        'ignore_links' => 'ignoreLinks',
        'senderemail' => 'senderemail',
        'sendername' => 'sendername',
        'subject' => 'subject',
        'linktracking' => 'linktracking',
        'class_name' => 'class_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'content' => 'setContent',
        'htcontent' => 'setHtcontent',
        'ignore_links' => 'setIgnoreLinks',
        'senderemail' => 'setSenderemail',
        'sendername' => 'setSendername',
        'subject' => 'setSubject',
        'linktracking' => 'setLinktracking',
        'class_name' => 'setClassName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'content' => 'getContent',
        'htcontent' => 'getHtcontent',
        'ignore_links' => 'getIgnoreLinks',
        'senderemail' => 'getSenderemail',
        'sendername' => 'getSendername',
        'subject' => 'getSubject',
        'linktracking' => 'getLinktracking',
        'class_name' => 'getClassName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['htcontent'] = isset($data['htcontent']) ? $data['htcontent'] : null;
        $this->container['ignore_links'] = isset($data['ignore_links']) ? $data['ignore_links'] : null;
        $this->container['senderemail'] = isset($data['senderemail']) ? $data['senderemail'] : null;
        $this->container['sendername'] = isset($data['sendername']) ? $data['sendername'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['linktracking'] = isset($data['linktracking']) ? $data['linktracking'] : null;
        $this->container['class_name'] = isset($data['class_name']) ? $data['class_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['content'] === null) {
            $invalidProperties[] = "'content' can't be null";
        }
        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content content of textmail. Content or htcontent is required
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets htcontent
     *
     * @return string
     */
    public function getHtcontent()
    {
        return $this->container['htcontent'];
    }

    /**
     * Sets htcontent
     *
     * @param string $htcontent content of html mail
     *
     * @return $this
     */
    public function setHtcontent($htcontent)
    {
        $this->container['htcontent'] = $htcontent;

        return $this;
    }

    /**
     * Gets ignore_links
     *
     * @return \Swagger\Client\Model\IgnoreLinks
     */
    public function getIgnoreLinks()
    {
        return $this->container['ignore_links'];
    }

    /**
     * Sets ignore_links
     *
     * @param \Swagger\Client\Model\IgnoreLinks $ignore_links links of which will be ignored for the tracking
     *
     * @return $this
     */
    public function setIgnoreLinks($ignore_links)
    {
        $this->container['ignore_links'] = $ignore_links;

        return $this;
    }

    /**
     * Gets senderemail
     *
     * @return string
     */
    public function getSenderemail()
    {
        return $this->container['senderemail'];
    }

    /**
     * Sets senderemail
     *
     * @param string $senderemail the senderamil of mpt set use the standard from the listSettings
     *
     * @return $this
     */
    public function setSenderemail($senderemail)
    {
        $this->container['senderemail'] = $senderemail;

        return $this;
    }

    /**
     * Gets sendername
     *
     * @return string
     */
    public function getSendername()
    {
        return $this->container['sendername'];
    }

    /**
     * Sets sendername
     *
     * @param string $sendername sendername
     *
     * @return $this
     */
    public function setSendername($sendername)
    {
        $this->container['sendername'] = $sendername;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject the subject
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets linktracking
     *
     * @return bool
     */
    public function getLinktracking()
    {
        return $this->container['linktracking'];
    }

    /**
     * Sets linktracking
     *
     * @param bool $linktracking should be the content be linktracked
     *
     * @return $this
     */
    public function setLinktracking($linktracking)
    {
        $this->container['linktracking'] = $linktracking;

        return $this;
    }

    /**
     * Gets class_name
     *
     * @return string
     */
    public function getClassName()
    {
        return $this->container['class_name'];
    }

    /**
     * Sets class_name
     *
     * @param string $class_name all emails with this classname will be bundled together in the frontend per day
     *
     * @return $this
     */
    public function setClassName($class_name)
    {
        $this->container['class_name'] = $class_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


